[server]
host: 0.0.0.0
port: 7125
klippy_uds_address: /home/pi/printer_data/comms/klippy.sock

[secrets]

[authorization]
trusted_clients:
    10.0.0.0/8
    127.0.0.0/8
    169.254.0.0/16
    172.16.0.0/12
    192.168.0.0/16
    FE80::/10
    ::1/128
cors_domains:
    *.lan
    *.local
    *.internal
    *://3dprinter.internal
    *://localhost
    *://localhost:*
    *://my.mainsail.xyz
    *://app.fluidd.xyz

[octoprint_compat]

[history]

[file_manager]
queue_gcode_uploads: True

[job_queue]
load_on_startup: True

[mqtt]
address: smarthome.internal
username: {secrets.mqtt_credentials.username}
password: {secrets.mqtt_credentials.password}
enable_moonraker_api: True
publish_split_status: True
status_interval: 2
status_objects:
  webhooks
  fan
  idle_timeout
  print_stats
  filament_switch_sensor
  temperature_sensor mcu_temp
  temperature_sensor raspberry_pi

[power Printer]
type: gpio
pin: gpiochip0/gpio14
initial_state: off
off_when_shutdown: True
on_when_job_queued: True
locked_while_printing: True
restart_klipper_when_powered: False
bound_services: klipper

[power Light]
type: mqtt
initial_state: off
off_when_shutdown: True
on_when_job_queued: False
command_topic: zigbee2mqtt/3D Printer Enclosure Light/set
command_payload:
	{% set payload = {"state": command} %}
	{payload|tojson}
state_topic: 3dprinter/external_sensors/light
state_response_template:
	{% set resp = payload|fromjson %}
	{% if resp["state"] == "ON" %}
		{"on"}
	{% else %}
		{"off"}
	{% endif %}

[sensor Chamber]
type: mqtt
name: Chamber
state_topic: 3dprinter/external_sensors/chamber
state_response_template:
	{% set data = payload|fromjson %}
	{set_result("temperature", data["temperature"]|float)}
	{set_result("humidity", data["humidity"]|float)}
parameter_temperature:
	units=°C
parameter_humidity:
	units=%H

[sensor Chamber2]
type: mqtt
name: Chamber2
state_topic: 3dprinter/external_sensors/chamber2
state_response_template:
	{% set data = payload|fromjson %}
	{set_result("temperature", data["temperature"]|float)}
	{set_result("humidity", data["humidity"]|float)}
	{set_result("pm25", data["pm25"]|int)}
	{set_result("tVOC", data["voc_index"]|int)}
parameter_temperature:
	units=°C
parameter_humidity:
	units=%H
parameter_pm25:
	units=µg/m³

[sensor Powerplug]
type: mqtt
name: Powermeter
state_topic: 3dprinter/external_sensors/power
state_response_template:
	{% set data = payload|fromjson %}
	{set_result("power", data["power"]|int)}
	{set_result("current", data["current"]|float)}
	{set_result("voltage", data["voltage"]|int)}
	{set_result("total", data["energy"]|float)}
parameter_power:
	units=W
parameter_voltage:
	units=V
parameter_current:
	units=A
parameter_total:
	units=kWh

[spoolman]
server: http://3dprinter.internal:7912

[timelapse]

[update_manager]
channel: dev
refresh_interval: 168

[update_manager mainsail-config]
type: git_repo
primary_branch: master
path: ~/mainsail-config
origin: https://github.com/mainsail-crew/mainsail-config.git
managed_services: klipper

[update_manager mainsail]
type: web
channel: stable
repo: mainsail-crew/mainsail
path: ~/mainsail

[update_manager Spoolman]
type: zip
channel: stable
repo: Donkie/Spoolman
path: ~/Spoolman
virtualenv: .venv
requirements: requirements.txt
persistent_files:
  .venv
  .env
managed_services: Spoolman

[update_manager klipper-macros]
type: git_repo
origin: https://github.com/stablestud/klipper-macros.git
path: ~/klipper-macros
primary_branch: ignore-too-hot-hotend-when-probing
is_system_service: False
managed_services: klipper

# Crowsnest update_manager entry
[update_manager crowsnest]
type: git_repo
path: ~/crowsnest
origin: https://github.com/mainsail-crew/crowsnest.git
managed_services: crowsnest
install_script: tools/pkglist.sh

# Mainsail Timelapse update_manager entry
[update_manager timelapse]
type: git_repo
primary_branch: main
path: ~/moonraker-timelapse
origin: https://github.com/mainsail-crew/moonraker-timelapse.git
managed_services: klipper moonraker

[update_manager mobileraker]
type: git_repo
path: /home/pi/mobileraker_companion
origin: https://github.com/Clon1998/mobileraker_companion.git
primary_branch:main
managed_services: mobileraker
env: /home/pi/mobileraker-env/bin/python
requirements: scripts/mobileraker-requirements.txt
install_script: scripts/install.sh

[include octoeverywhere-system.cfg]
